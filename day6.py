# -*- coding: utf-8 -*-
"""day6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nl87jOZWQYesm1S7jO2Jq0Dk2Hskurhn

creatinbg an object
"""

class Person:
    def __init__(self, name, age): # Changed def_init_ to __init__
        self.name = name
        self.age = age

    def greet(self):
        print(f"hello, my name is {self.name} and i am {self.age} years old.")

person1 = Person("alice", 25)
person1.greet()

"""constructors and _init_ method"""

class Circle:
    def __init__(self,radius): # Changed _init_ to __init__
       self.radius=radius

    def area(self):
        return 3.14*self.radius**2

circle1=Circle(5)
print(circle1.area())

"""car"""

class Car:
   no_of_wheels=0
   milege=70
   no_os_seats=4

   def moveforward(self):
       print("moving forward")

   def movrbackwards(self):
       print("moving backward")

   def turnleft(self):
       print("turning left")

   def turnright(self):
       print("turning right")
# Changed car() to Car() to match the class name
car1=Car()
print(car1.no_os_seats) #This will throw an error as Car does not have no_of_seats only no_os_seats
print(car1.milege)
print(car1.no_of_wheels)

car2=Car()
print(car2.no_os_seats) #This will throw an error as Car does not have no_of_seats only no_os_seats
print(car2.milege)
print(car2.no_of_wheels)


car3=Car()
car3.milege=100
car3.no_of_wheels=10
car3.no_of_seats=12 #This is fine we are assigning a new attribute
print(car3.no_of_seats)
print(car3.milege)
print(car3.no_of_wheels)

car3.moveforward()
car3.movrbackwards()
car3.turnleft()
car3.turnright()

class Car:
    def __init__(self, brand, model): # Changed _imit_ to __init__
        self.brand = brand # Changed make to brand
        self.model = model

    def display_info(self):
        print(f"Brand:{self.brand},Model:{self.model}")

car1 = Car("toyota", "camry")
car1.display_info()

class person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self._salary=50000
    def get_salary(self):
        return self._salary

    def get_salary(self):
        return self._salary

    def set_salary(self, new_salary):
        if new_salary>0:
            self._salary=new_salary
        else:
            print("salary must be positive")

    def display_info(self):
        print(f"Name:{self.name},Age:{self.age},Salary:{self._salary}")

person1=person("alice",30)
person1.display_info()
person1.set_salary(60000)
person1.display_info()

"""inheritence"""

class ParentClass:
    def __init__(self,name):
        self.name=name

    def name1(self):
        print(f"hello,my name is {self.name}")

class ChildClass(ParentClass):
      def __init__(self,name,age):
         super().__init__(name)
         self.age=age

      def age1(self):
          print(f" {self.age} years old")

child1=ChildClass("alice",15)
child1.name1()
child1.age1()

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id
    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Student ID: {self.student_id}")

student1 = Student("alice", 20, "s12345")
student1.display_info() # Changed student1.display.info() to student1.display_info()