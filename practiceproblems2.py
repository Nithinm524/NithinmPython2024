# -*- coding: utf-8 -*-
"""practiceproblems2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nstrRm9jLZn1NFtBSyXG_U2sXv0qk55l

Handle file not found error
"""

# prompt: Handle file not found error

import pandas as pd

try:
  df = pd.read_csv('data.csv')
  print(df)
except FileNotFoundError:
  print("File not found!")
except Exception as e:
  print(f"An error occurred: {e}")

"""handle division by zero"""

# prompt: Handle division by zero

import pandas as pd
# Handle file not found error


try:
  df = pd.read_csv('data.csv')
  print(df)
except FileNotFoundError:
  print("File not found!")
except Exception as e:
  print(f"An error occurred: {e}")

# handle division by zero
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Error: Division by zero")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""Invalid input handling"""

# prompt: Invalid input handling

# Invalid input handling
try:
    user_input = int(input("Enter an integer: "))
    print("You entered:", user_input)
except ValueError:
    print("Invalid input. Please enter a valid integer.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""Handle key error"""

# prompt: handle key error

# Handle key error
try:
    my_dict = {"a": 1, "b": 2}
    value = my_dict["c"]
    print(value)
except KeyError:
    print("Error: Key not found in dictionary")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""File read permission"""

# prompt: File read permission

try:
    with open('data.csv', 'r') as file:
        # Process the file here
        contents = file.read()
        print(contents)
except PermissionError:
    print("Error: Permission denied to read the file.")
except FileNotFoundError:
    print("Error: File not found.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""Catch multiple exceptions"""

# prompt: Catch multiple exceptions

try:
    # Code that might raise multiple exceptions
    result = 10 / 0  # Potential ZeroDivisionError
    value = my_dict["c"]  # Potential KeyError (if my_dict is not defined or doesn't have key "c")
    with open("nonexistent_file.txt", "r") as file:  # Potential FileNotFoundError
        file.read()
except (ZeroDivisionError, KeyError, FileNotFoundError) as e:
    print(f"A specific error occurred: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""Custom exception"""

# prompt: Custom exception

class InvalidAgeError(Exception):
    """Custom exception for invalid age."""
    pass

try:
    age = int(input("Enter your age: "))
    if age < 0:
        raise InvalidAgeError("Age cannot be negative.")
    elif age > 120:
        raise InvalidAgeError("Age seems too high.")
    print("Your age is:", age)
except InvalidAgeError as e:
    print(f"Invalid age: {e}")
except ValueError:
    print("Invalid input. Please enter a valid integer.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""Handle index error"""

# prompt: handle index error

try:
    my_list = [1, 2, 3]
    value = my_list[5]  # Accessing an index out of bounds
    print(value)
except IndexError:
    print("Error: Index out of range")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""Nested exception handling"""

# prompt: Nested exception handling

import pandas as pd

# Nested exception handling
try:
    try:
        # Code that might raise an exception
        result = 10 / 0
    except ZeroDivisionError:
        print("Inner try block: Division by zero")
        # Re-raise the exception to be caught by the outer try block
        raise
    except Exception as e:
        print(f"Inner try block: An unexpected error occurred: {e}")
        raise
except ZeroDivisionError:
    print("Outer try block: Division by zero caught")
except Exception as e:
    print(f"Outer try block: An unexpected error occurred: {e}")

"""resource cleanup with finally"""

# prompt: resource cleanup with finally

try:
    file = open("myfile.txt", "r")
    # Perform operations on the file
    contents = file.read()
    print(contents)
except FileNotFoundError:
    print("File not found")
except Exception as e:
    print(f"An error occurred: {e}")
finally:
    if 'file' in locals() and not file.closed:
        file.close()
    print("File closed successfully")